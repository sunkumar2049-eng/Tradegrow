# Docker Compose for TradingGrow Production Deployment
version: '3.8'

services:
  # Main Application
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://tradinggrow:${DB_PASSWORD}@db:5432/tradinggrow_prod
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - tradinggrow-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tradinggrow_prod
      - POSTGRES_USER=tradinggrow
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tradinggrow-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - tradinggrow-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - tradinggrow-network

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tradinggrow_prod
      - POSTGRES_USER=tradinggrow
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./backup_script.sh:/backup_script.sh
    command: |
      sh -c '
        while true; do
          pg_dump -h db -U tradinggrow tradinggrow_prod > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name "backup_*.sql" -mtime +7 -delete
          sleep 86400
        done
      '
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - tradinggrow-network

volumes:
  postgres_data:
  redis_data:

networks:
  tradinggrow-network:
    driver: bridge